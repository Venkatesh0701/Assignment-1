{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59f517ef-1694-4f3e-803d-819eee8424af",
   "metadata": {},
   "source": [
    "Q1.what is multithreading in python? why is it used? Name the module used to handle thread in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fb293b72-5689-4eaa-9899-54cf68a81a0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''The threading module is a high-level implementation of multithreading used to deploy an application in Python. \n",
    "To use multithreading, we need to import the threading module in Python Program. A start() method is used to initiate the activity of a thread.'''\n",
    "import threading\n",
    "def test(id):\n",
    "    print(\"program start %d\" %id)\n",
    "thread = [threading.Thread(target=test ,args=(i,)) for i in range(10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6300776-450a-483d-87c1-383a35eafc24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "program start 45\n"
     ]
    }
   ],
   "source": [
    "test(45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3f0234c0-c66a-4ef5-ad0a-daf861bc428b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "program start 0\n",
      "program start 1\n",
      "program start 2\n",
      "program start 3\n",
      "program start 4\n",
      "program start 5\n",
      "program start 6\n",
      "program start 7\n",
      "program start 8\n",
      "program start 9\n"
     ]
    }
   ],
   "source": [
    "for t in thread:\n",
    "    t.start()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd415ece-1a4d-4a63-86de-2972d714664b",
   "metadata": {},
   "source": [
    "Q2.why threading module used? write the use of the following function:\n",
    "    1.activeCount()\n",
    "    2.currentThread()\n",
    "    3.enumerate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5387de79-da02-48c0-8968-5ef8510b8c4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python threading allows you to have different parts of your program run concurrently and can simplify your design.\n",
    "'''threading.activeCount() − Returns the number of thread objects that are active.\n",
    "threading.currentThread() − Returns the number of thread objects in the caller's thread control.\n",
    "threading.enumerate() − Returns a list of all thread objects that are currently active.'''\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f793e2f5-5166-4eed-b042-2bdb273fa79c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test1(id):\n",
    "     for i in range(10):\n",
    "            print(\"test1 %d printing %d %s\" %(id,i,time.ctime()))\n",
    "            time.sleep(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "08b0ba15-aead-415d-bd23-01015b5c36ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test1 0 printing 0 Tue Jul 18 12:54:51 2023\n",
      "test1 0 printing 1 Tue Jul 18 12:54:52 2023\n",
      "test1 0 printing 2 Tue Jul 18 12:54:53 2023\n",
      "test1 0 printing 3 Tue Jul 18 12:54:54 2023\n",
      "test1 0 printing 4 Tue Jul 18 12:54:55 2023\n",
      "test1 0 printing 5 Tue Jul 18 12:54:56 2023\n",
      "test1 0 printing 6 Tue Jul 18 12:54:57 2023\n",
      "test1 0 printing 7 Tue Jul 18 12:54:58 2023\n",
      "test1 0 printing 8 Tue Jul 18 12:54:59 2023\n",
      "test1 0 printing 9 Tue Jul 18 12:55:00 2023\n"
     ]
    }
   ],
   "source": [
    "test1(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fba54f6b-e558-4aac-a4d9-d02cfc6585f9",
   "metadata": {},
   "source": [
    "Q3.expalin the following function:\n",
    "    1.run()\n",
    "    2.start()\n",
    "    3.join()\n",
    "    4.isAlive()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa6328ed-26cb-4392-aa35-3408d9b5cd8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''run() − The run() method is the entry point for a thread.\n",
    "\n",
    "start() − The start() method starts a thread by calling the run method.\n",
    "\n",
    "join([time]) − The join() waits for threads to terminate.\n",
    "\n",
    "isAlive() − The isAlive() method checks whether a thread is still executing.'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0067ba60-3e9f-4e6f-8ef8-ba96ae68745e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test1 0 printing 0 Tue Jul 18 13:14:03 2023\n",
      "test1 1 printing 0 Tue Jul 18 13:14:03 2023\n",
      "test1 2 printing 0 Tue Jul 18 13:14:03 2023\n",
      "test1 0 printing 1 Tue Jul 18 13:14:04 2023\n",
      "test1 1 printing 1 Tue Jul 18 13:14:04 2023\n",
      "test1 2 printing 1 Tue Jul 18 13:14:04 2023\n",
      "test1 0 printing 2 Tue Jul 18 13:14:05 2023\n",
      "test1 1 printing 2 Tue Jul 18 13:14:05 2023\n",
      "test1 2 printing 2 Tue Jul 18 13:14:05 2023\n",
      "test1 0 printing 3 Tue Jul 18 13:14:06 2023\n",
      "test1 1 printing 3 Tue Jul 18 13:14:06 2023\n",
      "test1 2 printing 3 Tue Jul 18 13:14:06 2023\n",
      "test1 0 printing 4 Tue Jul 18 13:14:07 2023test1 1 printing 4 Tue Jul 18 13:14:07 2023\n",
      "\n",
      "test1 2 printing 4 Tue Jul 18 13:14:07 2023\n",
      "test1 1 printing 5 Tue Jul 18 13:14:08 2023\n",
      "test1 0 printing 5 Tue Jul 18 13:14:08 2023\n",
      "test1 2 printing 5 Tue Jul 18 13:14:08 2023\n",
      "test1 1 printing 6 Tue Jul 18 13:14:09 2023test1 0 printing 6 Tue Jul 18 13:14:09 2023\n",
      "\n",
      "test1 2 printing 6 Tue Jul 18 13:14:09 2023\n",
      "test1 0 printing 7 Tue Jul 18 13:14:10 2023\n",
      "test1 1 printing 7 Tue Jul 18 13:14:10 2023\n",
      "test1 2 printing 7 Tue Jul 18 13:14:10 2023\n",
      "test1 0 printing 8 Tue Jul 18 13:14:11 2023\n",
      "test1 2 printing 8 Tue Jul 18 13:14:11 2023\n",
      "test1 1 printing 8 Tue Jul 18 13:14:11 2023\n",
      "test1 0 printing 9 Tue Jul 18 13:14:12 2023\n",
      "test1 2 printing 9 Tue Jul 18 13:14:12 2023\n",
      "test1 1 printing 9 Tue Jul 18 13:14:12 2023\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "thread1= [threading.Thread(target=test1, args=(i,)) for i in range(3)]\n",
    "for t in thread1:\n",
    "    t.start()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c87701-252e-45e1-9844-e5ae0316d0f3",
   "metadata": {},
   "source": [
    "Q4. write a python program to create two threads.Thread one must print the list of squares and thread two must print the list of cubes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "096caa74-57b2-4152-b998-826f6e9cc8b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Square: 100\n",
      "Cube: 1000\n"
     ]
    }
   ],
   "source": [
    "import threading\n",
    "def print_cube(num):\n",
    "\tprint(\"Cube: {}\" .format(num * num * num))\n",
    "\n",
    "def print_square(num):\n",
    "\tprint(\"Square: {}\" .format(num * num))\n",
    "\n",
    "\n",
    "if __name__ ==\"__main__\":\n",
    "\tt1 = threading.Thread(target=print_square, args=(10,))\n",
    "\tt2 = threading.Thread(target=print_cube, args=(10,))\n",
    "\tt1.start()\n",
    "\tt2.start()\n",
    "\tt1.join()\n",
    "\tt2.join()\n",
    "\n",
    "\t\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c42f3af6-fe2d-4860-9406-bae8a9582c70",
   "metadata": {},
   "source": [
    "Q5.state advantages and disadvantages of multithrrading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c981ebc-448e-4fba-a4e2-177e598df3b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    " Advantages:\n",
    "Since by multithreading multiple executions are carried out in the same process environment to a large degree independent of one other Multithreading assist the applications to perform and respond better.\n",
    "The operations can be completely interrupting driven.\n",
    "The processor utilization is inferior through multithreading. Thus the power consumption is decreased to a great extend.\n",
    "Multithreading is helpful in applications that must processes very large amount of data.\n",
    "'''\n",
    "\n",
    "'''\n",
    "Disadvantages:\n",
    "Since the threads are sharing the similar address area and can access the resources like open files problems can take place if different threads use different data structures.\n",
    "If a parent process has multiple threads for suitable process functioning the child processes also should be multithreaded since all of them may be essential.\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda5fdc2-5bc4-4ef2-8d02-e628b8fdaa26",
   "metadata": {},
   "source": [
    "Q6.expalin deadlock and race condition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4b18263-5608-4b26-8148-69793d31067f",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''A race condition occurs when two threads use the same variable at a given time. \n",
    "Deadlock exists when two threads seek one lock simultaneously. \n",
    "This situation will stop both threads from processing or executing the functions'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
